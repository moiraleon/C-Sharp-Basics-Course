namespaces act similar to packages in java they are are a collection of similar classes and exist for organizational purposes
on a higher level exists assemblies which are a container that hold related namespaces

Declaring Variables and Constants
//C# is a case sensitive language
int number;
int Number = 1;
const float Pi = 3.14f;

//names of identifiers or variables can not start with a number 
3littlePigs XXX  NO
//cannot include pre identifiers but can use @ symbol if needed
int XXX NO
@int YYY OK

Naming Conventions in C#
Camel case -- firstName -- use for local variables
Pascal ---FirstName --use for constants

XXX
Hungarian Notation -- strFirstName (prefixed variable with data type) --DON'T USE in C#

Primitive Types

byte
short
int
long
float
double
decimal
char
bool


How to Declare Primitive Types
float number = 1.2f;
decimal number = 1.2m;

Non Primitive Types

String,Array, Enum, Class

Overflowing
happens when you exceed the boundary of the byte data type
to prevent use checked key word

checked{
    byte number = 255;
    number = number +1;
}

will instead throw and exception 
///likely you will never run in to this

SCOPE
variables only accessible within their block of code or their children blocks

//Types Conversion
Casting (byte)(int)(float) done with parenthesis
For incompatible types
Convert.ToInt32(s)
.Parse(s)

Convert

ToByte()
ToInt16() --> to short
ToInt32() --> to long
ToInt64() --> to long

Operators
+
-
*
/
%
++
--

Comparison Operators 
==
!=
>
>=
<
<=

Assignment Operators

=
+= Ex a+=3 Equivalent a=a+3
-+
*=
/=

Logical Operators
&& AND
|| OR 
! not

Bitwise Operators

& |

Operates in "PEMDAS" order



Logical Operators and If Statements
for if, else if, else if there is only one line of code to be executed with condition
then curly braces are not necessary and if the condition is between variables that are mentioned
earlier the between && statement is not necessary


Simplifying If Statements

int income = 120_000;
boolean hasHighIncome;
if(income> 100_00){
    hasHighIncome = true;
}
else{
    hasHighIncome = false;
}

=>>>>

int income = 120_000;
boolean hasHighIncome = (income > 100_000);


The Ternary Operator

int income = 120_000;
String className = income > 100_00 ? "First" : "Economy";

Switch Statement 
//can be used in place of an if statement

String role = "admin";

switch(role){
    case "admin":
    sout("You're and admin") 
    break; 

    case "moderator":
    sout("You're a moderator")
    break;

    default:
    sout("You're a guest)
}

//can be done with integers etc. just not with longs

int role = 1;

switch(role){
    case 1:
    sout("You're and admin") 
    break; 
 
    case 2:
    sout("You're a moderator")
    break;

    default:
    sout("You're a guest)
}



comparator operators can not be used on strings or reference types because they are looking at their storage not their actual value

use the .equals() operator

continue; statement moves the code back to the beginning of the loop

For vs For each loop
String[] fruits = ["apple","banana","mango"]

for (int i = fruits.length; i >0; i--)
sout(fruits[i]);

for(String fruit: fruits) //fruit just represents each individual string object
sout(fruit)